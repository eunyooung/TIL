package sist.com.main;

/*
 *    클래스의 구성 요소 
 *    ==========================================
 *     1. 변수 = 데이터 저장 장소 
 *        = 인스턴스 변수 : 객체 생성시 따로 생성 => int 
 *        = 정적 변수 : 공유 (한개만 생성) => static int 
 *        = 지역 변수(루프변수, 플로그변수, 누적변수)  => 메소드안에서만 처리 
 *                  ======
 *                  for(int i=0;i<10;i++)
 *                  int sum=0;
 *    ==========================================
 *     2. 생성자 :  멤버변수의 초기화 
 *                생성자는 여러개 제작이 가능하다 (오버로딩)
 *                오버로딩 
 *                 1. 같은 클래스 안에서 
 *                 2. 같은 메소드명으로 사용 
 *                 3. 매개변수의 갯수나 데이터형이 다르다 
 *                 4. 리턴형은 관계없다 
 *                생성자는 반드시 필요한 것이 아니다 (생성자가 없는 경우
 *                    자동으로 생성 => 디폴트 생성자)
 *                특징)
 *                     리턴형이 존재하지 않는다 
 *                     class A
 *                     {
 *                        A(){}
 *                        A(int a){}
 *                        void A(double d){} => 일반 멤버
 *                     }
 *                     클래스명과 동일하다 
 *                     사용처 => 네트워크,윈도우 , 데이터베이스(드라이버 연결) 
 *                             ====== ===== 화면 UI 
 *                             1. 서버 구동 
 *                     => 시작과 동시에 한번만 호출하기 때문이다 
 *                        => 생성자를 여러개 호출 ==> 객체를 여러개 생성 
 *                     => 상속 예외 조건 
 *    ==========================================
 *      기능 설정 : 메소드 
 *        => 구조화 프로그램 (관련된 명령문을 모아서 한번에 처리 할 목적)
 *        => 반복을 제거할 경우에 주로 사용 
 *        => 한가지 기능을  수행할 수 있게 만든다 
 *        => 재사용시 주로 이용 
 *        => 요청을 받아서 요청 처리 결과값을 보내주는 역할 
 *           ==========     =================
 *             매개변수            리턴형 (한개만 사용이 가능)
 *                                => 여러개 보내는 경우 (클래스,배열)
 *             ====== 여러개 사용이 가능 (매개변수는 3개 이상 초과 금지)
 *             ======> 1 , 2 , 3 ==> 가변 매개변수 
 *                                   ===========
 *                                    int...
 *                                    (1)
 *                                    (1,2)
 *                                    (1,2,3)...
 *                                    printf("%d",1)
 *                                    printf("%d%d%d",5,4,5)
 *        => 메소드 매개변수 전송 방식 
 *           = Call By Value(값에 의한 전송) => 복사본
 *           = Call By Reference(주소에 의한 전송) => 원본
 *             ================== 클래스,배열 (예외 : String)
 *    ====================================================
 */
// 생성자 : 시작과 동시에 처리하는 내용 / 변수 초기화 => 객체 1개당 한번만 호출 가능하다
// 객체 저장시에 반드시 생성자가 호출되어야 한다 
// 생성자는 호출시에 반드시 new를 사용한다 
/*
 *   class A
 *   {
 *   }
 *   
 *   A a; => 주소가 없는 상태 (null)
 *   A(); => X
 *   new A(); => O
 */

class Sawon {
    // 멤버변수 
    int sabun = (int) (Math.random() * 100) + 1; // 0 => 명시적 초기값
    String name; // null
    String dept; // null  , double => 0.0 , char => '\0' 

    // 초기값 
    // 기능 추가 => 오버로딩
    public Sawon() {
        name = "홍길동"; // this.생략 
        dept = "개발부";
        // 쓰레드 구동 , 오라클 연결 , 서버연결 , 자동 로그인 
    }

    // 사용자로부터 입력을 받아서 저장 
    public Sawon(String name, String dept) {
        this.name = name;
        this.dept = dept;
        // this ==> static 생성되는 시점 ( Sawon s=new Sawon())
        // JVM ==> this=s  ==> 상위 클래스 super
    }

    // 변수 찾는 경우 ==> 1.지역변수(지역변수,매개변수) ==> 2. 멤버변수 
    public void display() {
        System.out.println("이름:" + name + ",부서:" + dept);
    }

    public void Sawon() { //일반 메소드
        System.out.println("Sawon Call");
    }

    // 생성자는 필요한 클래스에서 언제든지 호출이 가능 (접근지정어 : public)
}

// 사용법 , 호출 방법 (생성자) ==> new 
public class MainClass {

    public static void main(String[] args) {
        
        Sawon s1 = new Sawon();// 디폴트 생성자 (생성자를 구현하지 않은 경우 => 자동 생성)
        System.out.println("이름:" + s1.name + ",부서:" + s1.dept);
        Sawon s2 = new Sawon("박문수", "영업부");
        System.out.println("이름:" + s2.name + ",부서:" + s2.dept);
        s2.display();
        s1.display();
        s1.Sawon();

        new Sawon().display();
        new Sawon("이순신", "기획부").display();
    }

}